#include <stdio.h>
#include <dryos.h>
#include <module.h>
#include <menu.h>
#include <config.h>
#include <bmp.h>
#include <console.h>
#include <math.h>
#include <ptp.h>
#include <imgconv.h>

#define WIDTH 720
#define HEIGHT 480

void ptpview_task() {}

struct menu_entry ptpview_menu[] = {
	{
		.name = "PTP Liveview",
		.select = NULL,
		.help = "View screen from USB",
	},
};

int send_ptp_data(struct ptp_context *data, const char *buf, int size)
{
	int tmpsize;

	tmpsize = size;
	while ( size >= BUF_SIZE ) {
		if ( data->send_data(data->handle,(void *)buf,BUF_SIZE,tmpsize,0,0,0) ) {
			return 0;
		}

		tmpsize = 0;
		size -= BUF_SIZE;
		buf += BUF_SIZE;
	}
	if ( size != 0 ) {
		if ( data->send_data(data->handle,(void *)buf,size,tmpsize,0,0,0) ) {
			return 0;
		}
	}

	return 1;
}

/* image buffers */
uint8_t *rgb = NULL;
uint8_t *bmp_copy = NULL;
uint32_t *yuv_copy = NULL;

int get_screenscreen(struct ptp_context *data)
{
	/* what to save? */
	int save_yuv = 1;
	
	uint8_t *bvram = bmp_vram();
	uint8_t *lvram = NULL;
	struct vram_info *vram_info = get_yuv422_vram();

	if (vram_info != NULL) lvram = vram_info->vram;

	/* can we save the YUV buffer? (it might be uninitialized, e.g. in photo mode before going to LV) */
	if (!lvram) save_yuv = 0;

	/* do a fast temporary copy of the VRAMs to minimize motion artifacts (tearing) */
	if (save_yuv)
	{
		if (!yuv_copy)
			return 1;
		memcpy(yuv_copy, lvram, vram_lv.width * vram_lv.pitch);
	}

	// bmp_copy = tmp_malloc(WIDTH * HEIGHT);
	// if (!bmp_copy)
		// goto err;
	// for (int y = 0; y < HEIGHT; y++)
	// {
		// memcpy(bmp_copy + y * WIDTH, &bvram[BM(0,y)], WIDTH);
	// }

	/* setup output buffer */
	// rgb = malloc(WIDTH * HEIGHT * 3);
	// if (!rgb)
		// goto err;
	
	/* fill it with data */
	for (int y = 0; y < HEIGHT; y++)
	{
		for (int x = 0; x < WIDTH; x++)
		{
			int p = 0;
			uint8_t Y = 0; int8_t U = 0; int8_t V = 0;
			uint32_t pal = 0; uint8_t opacity = 0;
			
			/* get pixel at (x,y) */
			//p = bmp_copy[x + y * WIDTH];
			p = &bvram[BM(x, y)]
			
			/* get palette entry (including our DIGIC pokes, if any) */
			pal = shamem_read(LCD_Palette[3*p]);
			if (!pal)
				pal = LCD_Palette[3*p + 2];
			opacity = (pal >> 24) & 0xFF;
			Y = (pal >> 16) & 0xFF;
			U = (pal >>  8) & 0xFF;
			V = (pal >>  0) & 0xFF;
			
			uint32_t uyvy = 0;

			/* handle transparency (incomplete, needs more reverse engineering) */
			if (pal == 0x00FF0000) /* fully transparent */
			{
				if (save_yuv)
				{
					uyvy = yuv422_get_pixel(yuv_copy, BM2LV(x,y)/2);
				}
				Y = UYVY_GET_AVG_Y(uyvy);
				U = UYVY_GET_U(uyvy);
				V = UYVY_GET_V(uyvy);
			}
			else if (opacity == 0 || opacity == 1)  /* semi-transparent? */
			{
				if (save_yuv)
				{
					uyvy = yuv422_get_pixel(yuv_copy, BM2LV(x,y)/2);
				}
				uint8_t Y2 = UYVY_GET_AVG_Y(uyvy);
				int8_t U2 = UYVY_GET_U(uyvy);
				int8_t V2 = UYVY_GET_V(uyvy);
				
				Y = ((int)Y + (int)Y2) / 2;
				U = ((int)U + (int)U2) / 2;
				V = ((int)V + (int)V2) / 2;
			}
			/* other transparency codes? */
			
			/* convert to RGB */
			int R,G,B;
			yuv2rgb(Y, U, V, &R, &G, &B);
			
			/* copy to our buffer */
			rgb[(y*WIDTH + x)*3	] = R;
			rgb[(y*WIDTH + x)*3 + 1] = G;
			rgb[(y*WIDTH + x)*3 + 2] = B;
		}
	}

	/* no longer needed, output image created */
	bmp_copy = 0;
	yuv_copy = 0;

    send_ptp_data(data, (const char *)rgb, WIDTH * HEIGHT * 3);

	return 0;
}

static int ptpview_handler(void *priv, struct ptp_context *context,
						   uint32_t opcode, uint32_t session, uint32_t transaction,
						   uint32_t param1, uint32_t param2, uint32_t param3, uint32_t param4, uint32_t param5)
{
	get_screenscreen(context);
	struct ptp_msg msg = {
		.id = 0x2001,
		.session = session,
		.transaction = transaction,
		.param_count = 0,
	};

	context->send_resp(context->handle, &msg);

	return 0;
}

unsigned int ptpview_init()
{
	menu_add("Display", ptpview_menu, COUNT(ptpview_menu));

	rgb = malloc(WIDTH * HEIGHT * 3);
	yuv_copy = malloc(vram_lv.width * vram_lv.pitch);

	ptp_register_handler(0x9997, &ptpview_handler, 0);

	return 0;
}

unsigned int ptpview_deinit()
{
	return 0;
}

MODULE_INFO_START()
MODULE_INIT(ptpview_init)
MODULE_DEINIT(ptpview_deinit)
MODULE_INFO_END()

